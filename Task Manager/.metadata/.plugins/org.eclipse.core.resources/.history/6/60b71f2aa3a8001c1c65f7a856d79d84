
#include "DNode.hpp"
#include "DLL.hpp"
#include <iostream>
#include <stdlib.h>
using namespace std;


	DLL::DLL(){  // constructor - initializes an empty list
		last = NULL;
		first = NULL;
		numTasks = 0;
		tothrs = 0;
		totmin = 0;
	}
	DLL::DLL(string t, int p, int h, int m){  // constructor, initializes a list with one new node with data x
		DNode *n = new DNode (t,p,h,m);
		first = n;
		last = n;
		//cout<<"constructor first " <<first->task->priority<<" Task priority"<<endl;
		numTasks=1;
		tothrs = h;
		totmin = m;
	}

	/***************************************************************************************************/
	/*Part 1																																		*/
	/***************************************************************************************************/

	void DLL::push(string n, int p, int h, int m) {
    // does what you'd think, with a caveat that if the
	//priority isn't 3, it will move the task up to the end of the set of tasks with that priority.
	//In other words, if the priority is 1, it will traverse the list in reverse order until it finds a
	//task with a priority of 1, and insert the new task between the last task with a priority of
	//1 and the first task with a priority of 2
	//it also updates the total time of the list
		cout<<"Hey push"<<endl;

		//cout<<"what push? first " <<first->task->priority<<" And last "<<last->task->priority<<" Task prioritys"<<endl;

		DNode *r=new DNode(n,p,h,m);

		if(first==NULL&&last==NULL){
			first=r;
			last=r;
		}
//

		r->prev=last;
		//cout<<"what push?1 _" <<last->task->priority<<" Task priority"<<endl;
		last->next=r;
		//cout<<"what push?2" <<endl;
		last=r;
		//cout<<"what push?3" <<endl;
		first->prev=NULL;
		//<<r->task->priority<<"Task priority"<<endl;

		numTasks+=1;
//		DNode *tmppu=r;
//		if(first!=tmppu){
//			cout<<"Hey push "<<numTasks <<endl;
//			while((tmppu!=NULL)&&(tmppu->task->priority!=tmppu->prev->task->priority)){
//				//cout<<"Hey push yert"<<numTasks <<endl;
//				moveUp(numTasks);
//
//				//tmppu=tmppu->next;
//			}
//		}

		//delete tmp;

		tothrs += h;
		totmin += m;
		//cout<<"Bye push"<<endl;
	}
	Task *DLL::pop() {
	//does what you'd think - make sure to update the total time of the list.
	//Note -this isn’t all that necessary for this particular project, but I
	//kinda had to make you write pop because it’s //fundamental to so much of
	//linked list data type uses (e.g., stack, undo).
		//cout<<"Hey pop"<<endl;
		DNode *tmppo=last;
		tothrs -= last->task->hr;
		totmin -= last->task->min;
		Task *t=tmppo->task;
		last=last->prev;
		//delete tmp;
		last->next=NULL;
		numTasks-=1;
		cout<<"bye pop"<<endl;
		return t;
	}

	void DLL::printList() {
		//prints out the entire list, along with the total time necessary to complete all tasks
		//on the list
		//cout<<"Hey print list"<<endl;
		DNode *tmppl=first;
		while(tmppl!=NULL){
			tmppl->task->printTask();
			if(tmppl->next!=NULL)
				tmppl->next->task->printTask();
			cout<<"what print list?"<<endl;
			tmppl=tmppl->next;

		}
		//cout<<"Bye print list"<<endl;
	}

	void DLL::printList(int p) {
		//print out only all the tasks with a priority of p, along with the total time necessary
		//to complete the tasks with a priority of p
		//cout<<"Hey print listy p"<<endl;
		DNode *tmpplp=first,*i,*b,*tmpm;
		int th=0, tm=0,tn;
		if(p<4&&p>0){
		while(tmpplp!=NULL){
			if(tmpplp->task->priority==p){
				th+=tmpplp->task->hr;
				tm+=tmpplp->task->min;
				tmpplp->task->printTask();
			}
			tmpplp=tmpplp->next;
			}
		}else
			cout<<"This priority does not exist"<<endl;
//		th+=tm/60;
//		tm=tm%60;
		tmpm=first->next;
		i=tmpm->next;
		b=NULL;
//		cout<< "enter task number"<<endl;
//		cin>>tn;
		//cout<< "task "<<tn<<" is "<<b->task->task<<endl;
		if(tmpm->prev->prev==NULL){
			cout<< "first  "<<first->task->task<<endl<<endl;
			cout<< "tmp  "<<tmpm->task->task<<endl;

		}
//		tmpm->prev=b;
//		b->next=tmpm;
//		tmpm->next=NULL;
//		i->prev=NULL;
//		first=i;
//		last=tmpm;

		if(i->next!=NULL&&tmpm->prev!=NULL&&b!=NULL){
		//cout<< "task "<<tn<<" is "<<b->task->task<<endl;
		cout<< "task "<<tn<<" is "<<tmpm->next->next->task->task<<endl;


		cout<< "task "<<tn<<" is "<<first->next->task->task<<endl;
		}
		//cout<<"The total time to complete the priority # "<<p<<"tasks is "<<th<<":"<<tm<<endl;
	}

	void DLL::moveUp(int t) {
		// moves task with number tn up one in the list.
	    //If it is at the beginning of the list,
        //it will be moved to the end of the list.
		// NOTE: if this moves a task up before a task with a higher priority (1 is
		// higher priority than 2 - I know the wording is a bit weird), then this
		// changes the priority of the task being moved to that higher priority
		cout<<"Hey moveup"<<endl;
		DNode *tmpm=first,*b,*a,*i;//move,behind,around,infront
		int c=0;
		//DNode *tmpu=new DNode();
		//cout<<"printlist: "<<endl;
		//printList();
		//if(t<=numTasks){
			while(tmpm->task->tasknum!=t){
				cout<<"Hey moveup "<<tmpm->task->task <<" for count"<<++c<<endl;
				tmpm=tmpm->next;
			}

			if(tmpm->prev==NULL)
				cout<<"first"<<endl;
			cout<<"Hey moveup "<<tmpm->task->task <<endl;
			if(tmpm->next==NULL){ //m==last
				cout<<"move up here last"<<endl;
				b=tmpm->prev->prev;
				a=tmpm->prev;

				a->next=tmpm->next;
				tmpm->prev=a->prev;
				a->prev=tmpm;
				tmpm->next=a;
				b->next=tmpm;
				last=a;
				first->prev=NULL;
				last->next=NULL;
			}else if(tmpm->prev->prev==NULL){//m=second
				cout<<"move up here second"<<endl;
				a=tmpm->prev;
				i=tmpm->next;

				a->next=tmpm;
				tmpm->next=a;
				a->prev=tmpm;
				i->prev=a;
				tmpm->prev=NULL;
				first=tmpm;
				first->prev=NULL;
				last->next=NULL;
			}else if(tmpm->prev==NULL){//m==first
				cout<<"move up here first"<<endl;
				i=tmpm->next;
				b=last;

				tmpm->prev=b;
				b->next=tmpm;
				tmpm->next=NULL;
				i->prev=NULL;
				first=i;
				last=tmpm;
				first->prev=NULL;
				last->next=NULL;


			}else{
				cout<<"move up here other"<<endl;
				b=tmpm->prev->prev;
				a=tmpm->prev;
				i=tmpm->next;

				b->next=tmpm;
				a->next=i;
				tmpm->next=a;
				a->prev=tmpm;
				tmpm->prev=b;
				i->prev=a;
				first->prev=NULL;
				last->next=NULL;

			}

		//}

		//cout<<"Bye move up"<<endl;

	}

	void DLL::listDuration(int *th, int *tm,int tp) {
		// gets the list duration in hours and minutes (passed
		//in as pointers) of a particular priority (so the total time
		//needed to complete all tasks with priority of p)
		// I had you pass in the parameters as pointers for practice.

	}


	void DLL::moveDown(int tn) {
		//moves task with task number tn down one in the list.
		//If it is at the end of the list, it will move to
		//beginning of the list.
		//NOTE: if this moves a task after a task with a lower priority (again, 3 is
		//a lower priority than 2) then this changes the priority of the task being
		//moved.

	}

	int DLL::remove(int tn) {
		//removes a task (based on its number) and updates the total time of the list
		//Make sure you link the next to the previous and the previous to the next.  The
		//biggest catch with this method is making sure you test to make sure the node
		//after and/or the node before the node you’re deleting aren’t NULL (i.e., you’re
		//not deleting the first or last node in the list)
//		DNode *tmpr=new DNode();
//		if(tn>1){
//		for(int i=0;i<tn;i++)
//			tmpr=tmpr->next;
//		}
		return 0;
	}

	void DLL::changePriority(int tn, int newp) {
		//changes the priority of the task.  This method also moves the task to the end
		//of the set of tasks with
		//that priority.  In other words, if you have the following:
		/*task1, 1, 2:20
		task2, 1, 3:20
		task3, 1, 1:15
		task4, 2, 3:10
		task5, 2, 1:10
		task6, 3, 3:15
		task7, 3, 2:54

		And you change task6’s priority to 1, the resulting list should be:
		task1, 1, 2:20
		task2, 1, 3:20
		task3, 1, 1:15
		task6, 1, 3:15
		task4, 2, 3:10
		task5, 2, 1:10
		task7, 3, 2:54
		*/


	}

	DLL::~DLL(){
		DNode *tmp = first;
		DNode *tmp2 = first->next;
		while (tmp != NULL) {
			delete tmp;
			tmp = tmp2;
			if (tmp != NULL) {
				tmp2 = tmp2->next;
			}
		}
		first = NULL;
		last = NULL;
		numTasks = 0;
		tothrs = 0;
		totmin = 0;
	}

	/******************Optional Helper Methods********************************/
	void DLL::addTime(int h, int m) {
	}

	void DLL::removeTime(int h, int m) {
	}
	/********************End of Optional Helper Methods ********************/
